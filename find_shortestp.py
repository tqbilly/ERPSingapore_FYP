import sys
def shortestpath(graph,start,end,visited=[],distances={},predecessors={}):
    if start==end:
        path=[]
        while end != None:
            path.append(end)
            end=predecessors.get(end,None)
        return distances[start], path[::-1]
    if not visited: distances[start]=0
    for neighbor in graph[start]:
        if neighbor not in visited:
            neighbordist = distances.get(neighbor,sys.maxint)
            tentativedist = distances[start] + graph[start][neighbor]
            if tentativedist < neighbordist:
                distances[neighbor] = tentativedist
                predecessors[neighbor]=start
    visited.append(start)
    unvisiteds = dict((k, distances.get(k,sys.maxint)) for k in graph if k not in visited)
    closestnode = min(unvisiteds, key=unvisiteds.get)
    return shortestpath(graph,closestnode,end,visited,distances,predecessors)

RoadLen=[0.0175,0.1909,0.0667,0.1683,0.172,0.0535,0.0667,0.158,0.0667,0.1038,0.1171,0.0667,0.0915,0.1142]
# 03 10 14 21 34 36 41 45 47 52 67 74 78 85
# 0  1  2  3  4  5  6  7  8  9  10 11 12 13
graph = {'0': {'3':RoadLen[0]},
         '1': {'0':RoadLen[1],'4':RoadLen[2]},
         '2': {'1':RoadLen[3]},
         '3': {'4':RoadLen[4],'6':RoadLen[5]},
         '4': {'1':RoadLen[6],'5':RoadLen[7],'7':RoadLen[8]},
         '5': {'2':RoadLen[9]},
         '6': {'7':RoadLen[10]},
         '7': {'4':RoadLen[11],'8':RoadLen[12]},
         '8': {'5':RoadLen[13]}
         }
print shortestpath(graph, '8', '7')

#result:
# Indices:
# 0 1 2 3 4 5 6 7 8
# Link: Edges(directed):
# 03 10 14 21 34 36 41 45 47 52 67 74 78 85
# 0  1  2  3  4  5  6  7  8  9  10 11 12 13
# store the path-link incidence matrix
# Path:
# 01 02 03 04 05 06 07 08
# 0  1  2  3  4  5  6  7

# 10 12 13 14 15 16 17 18
# 8  9  10 11 12 13 14 15

# 20 21 23 24 25 26 27 28
# 16 17 18 19 20 21 22 23

# 30 31 32 34 35 36 37 38
# 24 25 26 27 28 29 30 31

# 40 41 42 43 45 46 47 48
# 32 33 34 35 36 37 38 39

# 50 51 52 53 54 56 57 58
# 40 41 42 43 44 45 46 47

# 60 61 62 63 64 65 67 68
# 48 49 50 51 52 53 54 55

# 70 71 72 73 74 75 76 78
# 56 57 58 59 60 61 62 63

# 80 81 82 83 84 85 86 87
# 64 65 66 67 68 69 70 71
plm=[
    [1,	0,	0,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0],
    [1,	0,	0,	0,	1,	0,	0,	1,	0,	1,	0,	0,	0,	0],
    [1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
    [1,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0],
    [1,	0,	0,	0,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0],
    [1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0],
    [1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	1,	0,	0,	0],
    [1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	1,	0,	1,	0],
    [0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	1,	0,	0,	0,	0,	1,	0,	1,	0,	0,	0,	0],
    [1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0],
    [1,	1,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0],
    [0,	0,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1,	0],#16
    [0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
    [1,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	1,	1,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0],
    [1,	1,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	1,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0],
    [0,	0,	1,	1,	0,	0,	0,	0,	1,	0,	0,	0,	1,	0],#24
    [0,	1,	0,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	0,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	0,	0,	1,	0,	0,	1,	0,	1,	0,	0,	0,	0],
    [0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	0,	0,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0],
    [0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	1,	0,	0,	0],
    [0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	1,	0,	1,	0],#32
    [0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	0,	0,	0,	0],
    [1,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0],
    [1,	1,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1,	0],#40
    [0,	1,	0,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0],
    [0,	0,	0,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0],
    [1,	1,	0,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0],
    [0,	0,	1,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0],
    [1,	1,	0,	1,	0,	1,	0,	0,	0,	1,	0,	0,	0,	0],
    [0,	0,	1,	1,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0],
    [0,	0,	1,	1,	0,	0,	0,	0,	1,	1,	0,	0,	1,	0],#48
    [0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	1,	1,	0,	0],
    [0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1,	1,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	1,	1],
    [1,	1,	0,	0,	0,	0,	1,	0,	0,	0,	1,	1,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	1],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	0],#56
    [0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	1,	0,	0],
    [0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	1,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	1,	1],
    [1,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	1,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1],
    [1,	1,	0,	0,	0,	1,	1,	0,	0,	0,	0,	1,	0,	0],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0],#64
    [0,	1,	0,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1],
    [0,	0,	0,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1],
    [1,	1,	0,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1],
    [0,	0,	1,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1],
    [0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1],
    [1,	1,	0,	1,	0,	1,	0,	0,	0,	1,	0,	0,	0,	1],
    [0,	0,	1,	1,	0,	0,	0,	0,	1,	1,	0,	0,	0,	1] #72
]